1
00:00:00,000 --> 00:00:04,528
接下来我们看然后计算大整数的模
The next thing we're going to look at is
how to compute modular large integers. So

2
00:00:04,528 --> 00:00:09,023
第一个问题是，我们如何在计算机里表示大整数？
the first question is how do we represent
large integers in a computer? So that's

3
00:00:09,023 --> 00:00:13,615
这点还是很直接的。假设我们有一台64位机
actually fairly straightforward. So
imagine we're on a 64 bit machine, what we

4
00:00:13,615 --> 00:00:18,361
我们把想表示的大数进行分割，32位一组
would do is we would break the number we
want to represent, into 32 bit buckets. And

5
00:00:18,361 --> 00:00:22,686
然后，我们会有n/32个组
then, we will basically have these n/32 bit buckets, and together they will

6
00:00:22,686 --> 00:00:26,906
它们可以表示这个数，我们想把它存储在计算机上
represent the number that we want to store
on the computer. Now, I should mention

7
00:00:26,906 --> 00:00:30,705
现在，我应该说，我只是拿64位寄存器作个例子
that I'm only giving 64 bit registers as
an example. In fact, many modern

8
00:00:30,705 --> 00:00:34,977
事实上很多现代处理器都有128位寄存器或更多，
你可以在上面计算乘法
processors have 128 bit registers or more,
and you can even do multiplications on

9
00:00:34,977 --> 00:00:38,987
一般情况下，你会使用长于32位的分组
them. So normally you would actually use
much larger blocks than just 32 bits. The

10
00:00:38,987 --> 00:00:42,943
你想限制到32位是因为这样一来
reason, by the way, you want to limit
yourself to 32 bits is so that you can

11
00:00:42,943 --> 00:00:46,952
你可以把两个分组乘在一起，而结果小于64位
multiply two blocks together, and the
result will still be less than 64 bits,

12
00:00:46,952 --> 00:00:51,189
小于机器字长。现在我们来看特定的
less than the word size on the machine. So
now let's look at particular arithmetic

13
00:00:51,189 --> 00:00:54,788
算术操作，看看它们会花多少时间。那么加法和减法
operations and see how long each one
takes. So addition and subtraction

14
00:00:54,788 --> 00:00:58,742
你要注意加法有进位，减法有借位
basically what you would do is that
addition would carry or subtraction would

15
00:00:58,742 --> 00:01:03,000
这些都是线性时间操作。换句话说
borrow and those are basically linear time
operations. In other words, if you want to

16
00:01:03,000 --> 00:01:06,954
如果你想加或减两个n位整数，运行时间
add or subtract two n bit integers the
running time is basically

17
00:01:06,954 --> 00:01:12,626
与n成线性。天然的乘法会花平方时间。事实上
linear in n. Multiplication
naively will take quadratic time. In fact,

18
00:01:12,626 --> 00:01:16,676
这是高中的算法，大家在高中学到的
this is what's called the high school
algorithm. This is what you kind of

19
00:01:16,676 --> 00:01:21,114
如果大家想想，就会看出
learned in school, where if you think
about this for a minute you'll see that,

20
00:01:21,114 --> 00:01:25,662
这个算法的时间与乘数的长度的平方成正比
that algorithm basically is quadratic in
the length of the numbers that are being

21
00:01:25,662 --> 00:01:30,156
令人惊奇的是，在1960年代Karatsuba提出一个算法
multiplied. So a big surprise in the 1960s
was an algorithm due to Karatsuba that
(Karatsuba是苏联数学家)

22
00:01:30,156 --> 00:01:34,150
可以取得比平方时间快得多的性能
actually achieves much better than
quadratic time in fact, it achieved a

23
00:01:34,150 --> 00:01:38,567
事实上，它的运行时间是n^1.585。
这里我不需要告诉大家
running time of n to the 1.585. And
there's actually no point in me showing

24
00:01:38,567 --> 00:01:43,166
这个算法是如何工作的。我只是提一下大致思想
you how the algorithm actually worked,
I'll just mention the main idea what

25
00:01:43,166 --> 00:01:48,071
Karatsuba当时发现的。事实上，当你想乘两个数时
Karatsuba realized, is that in fact when
you want to multiply two numbers, you can

26
00:01:48,071 --> 00:01:52,976
你可以取第一个乘数x，把它写成2^b乘以x2
write them as, you can take the first
number x, write it as 2 to the b times

27
00:01:52,976 --> 00:01:57,882
加上x1，这里x2和x1大约是x的平方根大小
x2 plus x1. Where x2 and x1 are roughly
the size of the square root of x. Okay, so

28
00:01:57,882 --> 00:02:02,910
那么我们可以把x分解成左边的x和右边的x
we can kind of break the number x into the
left part of x and the right part of x.

29
00:02:02,910 --> 00:02:07,654
你用2的b次方来表示x
And basically, you're writing x as if it
was written base 2 to the b. So it's got

30
00:02:07,654 --> 00:02:12,398
得到2的b次方进制的两个数位。你对y做同样的事
two digits base 2 to the b. And you do
the same thing with, y. You write y base

31
00:02:12,398 --> 00:02:16,911
你以2的b次方来表示y。你也会把y写成左边
2 to the b. Again, you would write it
as, the sum of the left half plus the

32
00:02:16,911 --> 00:02:21,540
加上右边的形式，然后，如果你试着计算这个乘法
right half, And then, normally, if you try
to do this multiplication, when you open

33
00:02:21,540 --> 00:02:27,486
当你展开这些括号时，你会发现，这需要4个乘法
up the parentheses. You see that, this
would require 4 multiplications, right?

34
00:02:27,486 --> 00:02:33,365
它需要计算x2乘y2，x2乘y1，x1乘y2，x1乘y1
It would require x2 times y2, x2 times y1,
x1 times y2, and x1 times y1. What

35
00:02:33,365 --> 00:02:39,879
Karatsuba发现有一种方法可以计算x乘以y
Karatsuba realized is there's a way to do
this multiplication of x by y using only

36
00:02:39,879 --> 00:02:45,847
只需3个x1,x2,y1,y2的乘法。计算x和y的大乘法
three multiplications of x1 x2 y1 y2. So it's just a big multiplication of x times y

37
00:02:45,847 --> 00:02:50,214
只需计算3个小乘法
only it takes three little multiplications. You can now recursively

38
00:02:50,214 --> 00:02:55,087
你现在可以递归地应用同样的流程
来计算x2乘y2，x2乘y1，等等
apply exactly the same procedure to
multiplying x2 by y2, and x2 by y1, and so

39
00:02:55,087 --> 00:02:59,960
你会得到这个递归算法
on and so forth. And you would get this
recursive algorithm. And if you do the

40
00:02:59,960 --> 00:03:05,087
如果你进行递归分析，你会看到运行时间是n^1.585
recursive analysis, you will see that
basically, you get a running time of n to the 1.585.

41
00:03:05,087 --> 00:03:13,640
这里的1.585其实是log_2 3
This number is basically, the 1.585 is basically, log of 3 base 2.
(T(n)=3T(n/2)+O(1)=O(n^(log_2 3)))

42
00:03:13,640 --> 00:03:17,836
令人惊奇的是，实际上Karatsuba还不是最好的乘法算法
Surprisingly, it turns out that Karatsuba
isn't even the best multiplication

43
00:03:17,836 --> 00:03:23,912
实际上你可以用大约n log(n)的时间来计算乘法
algorithm out there. It turns out that, in fact, you can do multiplication in about n log(n) time.

44
00:03:23,912 --> 00:03:28,678
那么你可以用几乎线性的时间来计算乘法。但是
这是一个极为渐近的结果
So you can do multiplication in almost linear time. However, this is an extremely asymptotic results.

45
00:03:28,678 --> 00:03:31,477
这个大O记号忽略了很大的常数
The big O here hides very big constants. And as a

46
00:03:31,477 --> 00:03:35,452
因此这个算法只有当乘数非常巨大的时候
result, this algorithm only becomes
practical when the numbers are absolutely

47
00:03:35,452 --> 00:03:39,152
才会变得实用。那么这个算法实际上用的不多
enormous. And so this algorithm is
actually not used very often. But

48
00:03:39,152 --> 00:03:43,183
但Karatsuba算法很常用。事实上大多数的密码学库
Karatsuba's algorithm is very practical.
And in fact, most crypto-libraries

49
00:03:43,183 --> 00:03:47,885
都用的是Karatsuba算法来实现乘法。但是
implement Karatsuba's algorithm for
multiplication. However, for simplicity

50
00:03:47,885 --> 00:03:51,923
这里我就忽略了Karatsuba算法的细节，为求简单
here, I'm just gonna ignore Karatsuba's
algorithm, and just for simplicity, I'm

51
00:03:51,923 --> 00:03:55,960
我假设乘法运行在平方时间里。但大家应该始终认为
gonna assume that multiplication runs in
quadratic time. But in your mind, you

52
00:03:55,960 --> 00:03:59,893
乘法应该比平方时间稍快些
should always be thinking all multiplication really is a little bit faster than quadratic.

53
00:03:59,893 --> 00:04:04,794
乘法之后，下一个问题是
And then the next question after multiplication is what about

54
00:04:04,794 --> 00:04:10,297
关于带余数的除法，实际上这也是个平方时间算法
division with remainder and it turns out
that's also a quadratic time algorithm.

55
00:04:10,297 --> 00:04:15,420
剩下的主要问题是，一个我们目前已经用了很多次的
So the main operation that remains, and one
that we've used many times so far, and

56
00:04:15,420 --> 00:04:20,346
但我却从未告诉大家如何计算它的东西
I've never, actually never, ever told you
how to actually compute it, is this

57
00:04:20,346 --> 00:04:26,339
就是求幂的问题。那么我们来抽象一点地解决
question of exponentiation. So let's solve
this exponentiation problem a bit more

58
00:04:26,339 --> 00:04:31,558
这个指数问题。那么设想一下，我们有一个有限循环群G
abstractly. So imagine we have a finite
cyclic group G. All this means is that

59
00:04:31,558 --> 00:04:37,115
这意味着这个群是由生成元g的各个幂生成的
this group is generated from the powers of
some generator little g. So for example

60
00:04:37,115 --> 00:04:42,673
比如想想群Z_p^*，g是某个G的生成元
think of this group as simply ZP*, and think of little g as some generator of

61
00:04:42,673 --> 00:04:48,886
我这样做的原因是想让大家适应
big G. The reason I'm sitting in this way,
is I'm, I want you to start getting used

62
00:04:48,886 --> 00:04:54,023
这种抽象，我们在处理一个普通的群，而Z_p^*
to this abstraction where we deal with a
generic group G and ZP really is just

63
00:04:54,023 --> 00:04:58,915
仅仅是一个例子。但事实上还有很多有限循环群的例子
one example of such a group. But, in fact,
there are many other examples of finite

64
00:04:58,915 --> 00:05:03,379
我想再强调一下群G
cyclic groups. And again I want to
emphasis basically that group G, all it

65
00:05:03,379 --> 00:05:08,087
是由其生成元的所有幂组成，共有群的阶数个幂
is, it's simply this powers of this
generator up to the order of the group.

66
00:05:08,087 --> 00:05:15,153
我写成g^q。那么现在我们的目标是，给定这个生成元g
I'll write it as G to the Q. So our goal
now is given this element g, and some

67
00:05:15,153 --> 00:05:20,797
以及某个指数x，我们的目标是计算g^x
exponent x, our goal is to compute the
value of g to the x. Now normally what you

68
00:05:20,797 --> 00:05:24,810
通常情况下你会认为，如果x=3
would say is, you would think well, you
know, if x is equal to 3 then I'm

69
00:05:24,810 --> 00:05:28,898
我要计算g^3。没有太多办法
gonna compute you know, g cubed. Well,
there's really nothing to do. All I do is

70
00:05:28,898 --> 00:05:32,795
我只能计算g*g*g，获得g^3，记为所求
I just do g times g times g and I get g
cubed, which is what I wanted. So that's

71
00:05:32,795 --> 00:05:36,790
那很容易。但事实上，这不是我们感兴趣的情况
actually pretty easy. But in fact, that's
not the case that we're interested in. In

72
00:05:36,790 --> 00:05:40,638
在我们的情况下，指数将非常巨大。所以如果你去试
our case, our exponents are gonna be
enormous. And so if you try, you know,

73
00:05:40,638 --> 00:05:45,644
想象一个500位的指数，如果试图去计算g的500位次方
think of like a 500-bit number and so if
you try to compute g to the power of a

74
00:05:45,644 --> 00:05:50,710
计算类似于g*g*g*...要花不少时间的
500-bit number simply by multiplying g by
g by g by g this is gonna take quite a

75
00:05:50,710 --> 00:05:55,716
事实上这会花掉指数级时间，这不是我们想要的
while. In fact it will take exponential
time which is not something that we want

76
00:05:55,897 --> 00:06:00,722
问题是尽管x非常大，我们能否依然很快地计算g^x？
to do. So the question is whether even
though x is enormous, can we still compute

77
00:06:00,722 --> 00:06:05,667
答案是肯定的，相应的算法叫做
g to the x relatively fast and the answer
is yes and the algorithm that does that

78
00:06:05,667 --> 00:06:10,822
重复平方算法。我来告诉大家重复平方算法如何工作
is called a repeated squaring algorithm.
And so let me show you how repeated

79
00:06:10,822 --> 00:06:15,593
我们看个例子，53。你要计算53个g的乘积
squaring works. So let's take as an
example, 53. Naively you would have to do

80
00:06:15,593 --> 00:06:20,295
g*g*g*g*..一共53个g
53 multiplications of g by g by g by g
until you get to g by the 53 but I want to

81
00:06:20,295 --> 00:06:25,275
但我想告诉大家，可以很快地做这个计算。
我们把53写成二进制
show you how you can do it very quickly.
So what we'll do is we'll write 53 in

82
00:06:25,275 --> 00:06:30,497
那么这是53的二进制表示
binary. So here this is the binary
representation of 53. And all that means

83
00:06:30,497 --> 00:06:36,282
这意味着，大家注意这个1代表32，这个1代表16
is, you notice this one corresponds to 32,
this one corresponds to 16, this one

84
00:06:36,282 --> 00:06:41,292
这个1代表4，这个1代表1，所以53是
corresponds to 4, and this one
corresponds to 1. So really 53 is 32

85
00:06:41,292 --> 00:06:47,038
32+16+4+1。这意味着g的53次方
plus 16 plus 4 plus 1. But what
that means is that g to the power of 53 is

86
00:06:47,038 --> 00:06:51,801
就是g的32+16+4+1次方。我们可以把指数分解开
g to the power of 32+16+4+1. And we can
break that up, using again, the rules of

87
00:06:51,801 --> 00:06:57,235
再次使用指数法则，我们可以把g^53分解成
g^32乘g^16乘g^4
exponentiation. We can break that up as g
to the 32 times g to the 16 times g to the

88
00:06:57,235 --> 00:07:02,938
乘g^1，现在这应该能给大家一个如何计算g^53的想法了
4 times g to the 1, Now that should start
giving you an idea for how to compute g to

89
00:07:02,938 --> 00:07:07,141
我们取g，然后开始计算平方
the 53 very quickly. What we'll do is,
simply, we'll take g and we'll start

90
00:07:07,141 --> 00:07:11,459
由g想得到g^2，再平方一次
squaring it. So what square wants, g wants
to get g squared. We square it again to

91
00:07:11,459 --> 00:07:15,778
得到g^4，接着是g^8, g^16, g^32
get g to the 4, turn g to the 8.
Turn g to the 16, g to the 32. So

92
00:07:15,778 --> 00:07:20,607
所以我们计算了所有的这些g的平方。现在
we've computed all these squares of g. And
now, what we're gonna do is we're simply

93
00:07:20,607 --> 00:07:25,719
我们简单地乘合适的幂，就可以得到g^53
gonna multiply the appropriate powers to
give us the g to the 53. So this is g to

94
00:07:25,719 --> 00:07:30,390
这是g^1*g^4*g^16*g^32
the one times g to the 4 times g to the 16 times g to the 32, is basically

95
00:07:30,390 --> 00:07:35,376
即为所求值g^53。那么这里大家看到了
gonna give us the value that we want,
which is g to the 53. So here you see that

96
00:07:35,376 --> 00:07:40,173
我们必须做的计算，数一下，1，2，3，4
all we had to do was just compute, let's
see, we had to do one, two, three, four,

97
00:07:40,173 --> 00:07:49,343
5次平方，再加4次乘法，所以通过9步乘法
five squaring, plus four more multiplications
so with 9 multiplications we computed g

98
00:07:49,343 --> 00:07:53,726
我们计算出了g^53。这是很有趣的。实际上
to the 53. Okay so that's pretty
interesting. And it turns out this is a

99
00:07:53,726 --> 00:07:58,253
这是很一般的现象，可以让我们很快地计算g的极高次幂
general phenomena that allows us to raise
g to very, very high powers and do it very

100
00:07:58,253 --> 00:08:02,509
我来为大家展示这个算法，我叫它重复平方算法
quickly. So let me show you the algorithm,
as I said this is called the repeated

101
00:08:02,509 --> 00:08:06,497
算法的输入是元素g
squaring algorithm. So the input to the
algorithm is the element g and the

102
00:08:06,497 --> 00:08:10,858
和指数x。输出是g^x
exponent x. And the output is g to the x.
So what we're gonna do is we're gonna

103
00:08:10,858 --> 00:08:15,415
我们把x写成二进制表示。不妨设x有n位
write x in binary notation. So let's say
that x has n bits. And this is the actual

104
00:08:15,415 --> 00:08:19,521
这是x的二进制位表示。然后我们做如下事情
bit representation of x as a binary
number. And then what we'll do is the

105
00:08:19,521 --> 00:08:24,246
我们有两个寄存器。y是一个总是做平方运算的寄存器
following. We'll have these two registers.
y is gonna be a register that's constantly

106
00:08:24,246 --> 00:08:28,127
z是一个累加器
squared. And then z is gonna be an
accumulator that multiplies in the

107
00:08:28,127 --> 00:08:32,683
计算g的幂的乘法。我们只需循环
appropriate powers of g as needed. So all
we do is the following we loop through the

108
00:08:32,683 --> 00:08:36,526
x的位数那么多轮，从最低位开始
bits of x starting from the least
significant bits, And then we do the

109
00:08:36,526 --> 00:08:41,414
然后我们做如下事情：每轮循环中，我们平方y
following: in every iteration we're simply
gonna square y. Okay, so y just keeps on

110
00:08:41,414 --> 00:08:45,940
y每轮都被平方，然后当x中对应位是1时
squaring at every iteration. And then
whenever the corresponding bit of the

111
00:08:45,940 --> 00:08:50,554
我们让累加器z去累乘y的当前值
exponent x happens to be one, we simply
accumulate the current value of y into

112
00:08:50,554 --> 00:08:55,173
最后我们输出z。完事，即为整个算法
this accumulator z and then at the end, we
simply output z. That's it. That's the

113
00:08:55,173 --> 00:08:59,558
这就是重复平方算法
whole algorithm, and that's the repeated
squaring algorithm. So, let's see an

114
00:08:59,558 --> 00:09:04,060
那么我们看一个g^53的例子。大家可以看到这两栏
example with G to the 53. So,
you can see the two columns. y is one

115
00:09:04,060 --> 00:09:08,387
y是一栏，表示每轮y的演进；z是另一栏
column, as it evolves through the
iterations, and z is another column, again

116
00:09:08,387 --> 00:09:13,064
表示每轮z的演进。y没什么意思
as it evolves through the iterations. So,
y is not very interesting. Basically, all

117
00:09:13,064 --> 00:09:17,449
每过一轮，y被平方
that happens to y is that at every
iteration, it simply gets squared. And so

118
00:09:17,449 --> 00:09:22,299
计算平方，得到幂，完事
it just walks through the powers of two
and the exponents and that's it. z is the

119
00:09:22,299 --> 00:09:26,915
z是个更有趣的寄存器，它累乘着合适的
more interesting register where what it
does is it accumulates the appropriate

120
00:09:26,915 --> 00:09:31,882
g的幂，对应于指数是1的那些位。例如
powers of g whenever the corresponding bit
to the exponent is one. So for example the

121
00:09:31,882 --> 00:09:36,031
指数的第一位是1，因此，在第一轮结束后
first bit of the exponent is one,
therefore, the, at the end of the first

122
00:09:36,031 --> 00:09:41,219
z的值就等于g。指数的第二位是0
iteration the value of z is simply equal to
g. The second bit of the exponent is zero

123
00:09:41,219 --> 00:09:46,473
所以第二轮结束后，z的值不变
so the value of z doesn't change after the
second iteration. And at the end of the

124
00:09:46,473 --> 00:09:51,856
指数的第三位是1，在第三轮结束后
third iteration well the third bit of the
exponent is one so we accumulate g to the

125
00:09:51,856 --> 00:09:56,662
我们用z累乘了g^4。指数的下一位是0，z不变
fourth into z. The next bit of the
exponent is zero so z doesn't change. The

126
00:09:56,662 --> 00:10:02,109
指数的下一位是1，所以现在我们累乘y的值
next bit of the exponent is one and so now
we're supposed to accumulate the previous

127
00:10:02,109 --> 00:10:07,491
到累加器z，我问大家z的值是多少？
value of y into the accumulator z so let
me ask you so what's gonna be the value of z?

128
00:10:10,868 --> 00:10:14,245
我们把g^16次方累乘到z
Well, we simply accumulate g to the
16 into z and so we simply compute the sum

129
00:10:14,245 --> 00:10:19,594
16+5=21。最终，最后一位是1
of 16 and 5 we get g to the 21.
Finally, the last bit is also set to one

130
00:10:19,594 --> 00:10:24,943
所以我们累乘进z，32+21=53，我们输出g^53
so we accumulate it into z, we do 32 plus 21 and we get the finally output g to the 53.

131
00:10:24,943 --> 00:10:30,022
好，这就给大家一个重复平方算法的思路
Okay, so this gives you an idea of how
this repeated squaring algorithm works.

132
00:10:30,022 --> 00:10:35,777
这个算法很有趣，可以让我们计算g的极高次幂
It's is quite an interesting algorithm and
it allows us to compute enormous powers of

133
00:10:35,777 --> 00:10:41,064
以非常快的速度。那么循环次数
g very, very, very quickly. So the number
of iterations here, essentially, would be

134
00:10:41,064 --> 00:10:46,456
是log_2 x。好。大家注意循环次数
log base 2 of x. Okay. You notice the
number of iterations simply depends on the

135
00:10:46,456 --> 00:10:51,954
取决于x的位数，即log_2 x
number of digits of x, which is basically
the log base 2 of x. So even if  x is a

136
00:10:51,954 --> 00:10:56,519
即使x有500位，500次乘法、500次循环
500 bit number in 500 multiplication,
well, 500 iterations, really 1,000

137
00:10:56,519 --> 00:11:01,736
约1000次乘法，因为我们必须计算平方和累乘
multiplications because we have to square
and we have to accumulate. So in 1,000

138
00:11:01,736 --> 00:11:06,627
所以1000次乘法以内，我们就可以求出g的500位次方
multiplications we'll be able to raise g
to the power of a 500 bit exponent.

139
00:11:06,627 --> 00:11:12,760
那么现在我们可以小结一下运行时间
Okay so now we can summarize kind of the running times so suppose we

140
00:11:12,760 --> 00:11:17,680
假设我们有一个N位模，我们说过，Z_N上的加减法
have an N bit modulus capital N as we
said addition and subtraction in ZN takes

141
00:11:17,680 --> 00:11:22,157
花线性时间。我说过，Karatsuba让乘法计算更有效
linear time. Multiplication of just, you
know, as I said, Karatsuba's actually makes this

142
00:11:22,157 --> 00:11:26,897
为求简化，我们说乘法需平方时间
more efficient, but for simplicity we'll
just say that it takes quadratic time. And

143
00:11:26,897 --> 00:11:31,579
然后对于指数，如我所说，需要log(x)次循环
then exponentiation, as I said, basically
takes log of x iterations, and at each

144
00:11:31,579 --> 00:11:35,509
每轮我们做两次乘法，所以它是O(log(x))次乘法
iteration we basically do two
multiplications. So it's O(log (x))

145
00:11:35,509 --> 00:11:40,307
我们说过乘法是时间是平方的
times the time to multiply. And let's say
that the time to multiply is quadratic. So

146
00:11:40,307 --> 00:11:44,758
所以运行时间将是N^2 log(x)
the running time would be, really, N
squared log x. And since x is always gonna

147
00:11:44,758 --> 00:11:49,168
根据费马小定理，x总是小于N，没有必要去计算
be less than N, by Fermat's theorem
there's no point in raising g to a power

148
00:11:49,168 --> 00:11:53,958
g的次数大于模的幂。所以x小于N
that's larger than the modulus. So x is
gonna be less than N. Let's suppose that x

149
00:11:53,958 --> 00:11:58,570
我们假设x也是N位整数，那么指数算法是立方时间算法
is also an N-bit integer, then, really
exponentiation is a cubic-time algorithm.

150
00:11:58,570 --> 00:12:02,970
我希望大家记住的是，指数运算其实很慢
Okay so that's what I wanted you to
remember, that exponentiation is actually

151
00:12:02,970 --> 00:12:07,163
现在，在现代计算机上，指数运算要花几个毫秒
a relatively slow. These days, it actually
takes a few microseconds on a modern

152
00:12:07,163 --> 00:12:11,259
但是对于GHz级的处理器来说
computer. But still, microseconds for a,
for a, say a four gigahertz processor is

153
00:12:11,259 --> 00:12:15,092
毫秒级已是巨大的工作了。所以记住
quite a bit of work. And so just keep in
mind that all the exponentiation

154
00:12:15,092 --> 00:12:19,556
我们讨论过的所有求指数的操作，比如，
判断一个数是否是二次剩余的
operations we talked about. For example,
for determining if a number is a quadratic

155
00:12:19,556 --> 00:12:23,600
所有这些指数操作都要花立方时间的
residue or not, All those, all those
exponentiations basically take cubic time.

156
00:12:24,780 --> 00:12:29,677
那么我们的模算法讨论完结
Okay, so that completes our discussion of
arithmetic algorithms, and then in the

157
00:12:29,677 --> 00:12:34,078
下节我们开始讨论质数模、合数模的难题
next segment we'll start talking about
hard problems, modulo, primes and composites.
