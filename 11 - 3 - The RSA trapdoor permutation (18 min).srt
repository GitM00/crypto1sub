1
00:00:00,000 --> 00:00:04,090
上一节我们看了如何构建公钥加密，根据陷门函数
In the previous segment we saw how to
build public key encryption from trapdoor

2
00:00:04,090 --> 00:00:08,390
本节我们要构建一个经典的陷门函数叫做RSA
functions, in this segment we're going to
build a classic trapdoor function called

3
00:00:08,390 --> 00:00:13,295
但首先我们快速回顾一下，什么是陷门函数
RSA. But first let's quickly review what a
trapdoor function is. So recall that a

4
00:00:13,295 --> 00:00:17,283
一个陷门函数由三个算法组成
trapdoor function is made up of three
algorithms. There is a key generation

5
00:00:17,283 --> 00:00:21,056
一个密钥生成算法，陷门函数本身，以及陷门函数的逆
algorithm, the function itself, and the
inverse of the function. The key

6
00:00:21,056 --> 00:00:25,313
密钥生成算法输出一个公钥和一个私钥。在这里
generation algorithm outputs a public key
and a secret key. And in this case, in

7
00:00:25,313 --> 00:00:29,786
本讲中公钥将定义一个函数，将集合X映射到它自身
this lecture the public key is going to
define a function that maps the set X onto

8
00:00:29,786 --> 00:00:33,882
这就是我为什么叫这些陷门函数为陷门置换
itself. Which is why I call these things
trapdoor permutations, as opposed to

9
00:00:33,882 --> 00:00:37,978
而不叫陷门函数，因为这个函数将X映射到他自身
trapdoor functions, simply because the
function maps X onto itself, whereas a

10
00:00:37,978 --> 00:00:43,356
而陷门函数可以将集合X映射到一个任意集合Y
trapdoor function might map the set X to
some arbitrary set Y. Now given the public

11
00:00:43,356 --> 00:00:47,819
现在给定公钥，陷门函数，如我们所说，定义了
从集合X映射到X的函数
key, the function, as we say, basically
defines this function from the set X to

12
00:00:47,819 --> 00:00:52,914
那么给定私钥，我们可以求这个函数的逆
the set X. And then given the secret key,
we can invert this function. So this

13
00:00:52,914 --> 00:00:57,401
这个函数F从正方向计算了这个函数
function F evaluates the function in the
forward direction, and this function F

14
00:00:57,401 --> 00:01:02,059
而这个F的逆，意味着用私钥SK，可以从反方向计算F
inverse, which means the secret key SK,
computes F in the reverse direction. Now

15
00:01:02,059 --> 00:01:06,489
现在我们说这个陷门置换是安全的，如果由公钥定义的函数
we say that the trapdoor permutation is
secure if the function defined by the

16
00:01:06,489 --> 00:01:11,033
事实上是一个单向函数，意味着它是容易计算的
public key is in fact a one-way function,
which means that it's easy to evaluate,

17
00:01:11,033 --> 00:01:15,404
但如果没有陷门（私钥是陷门），是很难求逆的
but without the trapdoor, the secret
trapdoor, it's difficult to invert. Before

18
00:01:15,404 --> 00:01:20,076
在我们看第一个陷门置换之前，我想简单回顾一下
we look at our first example of a trapdoor
permutation, I want to do a quick review

19
00:01:20,076 --> 00:01:24,467
一些我们需要的必要的算术事实。特别是
of some necessary arithmetic facts that
we're gonna need. And in particular,

20
00:01:24,467 --> 00:01:28,632
我们看一些关于合数模的算术事实
let's look at some arithmetic facts
modulo composites. So here we have our

21
00:01:28,632 --> 00:01:33,192
这里我们有模N，N正好是两个质数的积
modulus N, which happens to be a product
of two primes, and you should be thinking

22
00:01:33,192 --> 00:01:37,864
大家应该想到p和q，它们的大小差不多，因为
of P and Q as roughly equal size numbers,
since particular P and Q are both roughly

23
00:01:37,864 --> 00:01:42,407
P和Q的大小差不多是N的平方根。那么两个大小差不多大
on the size of square root of N. So both
are roughly the same size. Recall that we

24
00:01:42,407 --> 00:01:46,834
我们记Z_N，表示从0到N-1的所有整数的集合
denoted by ZN the set of integers from
zero to N minus one, and we said that we

25
00:01:46,834 --> 00:01:51,318
我们说过，在Z_N上我们可以做模N加法和乘法。我们记Z_N^*
can do addition and multiplication module N. We denoted by ZN star the set of

26
00:01:51,318 --> 00:01:55,801
表示Z_N上的乘法可逆元素。那么这些是全部的元素
invertible elements in ZN. So these are
all the elements, which have a modular

27
00:01:55,801 --> 00:02:00,925
它们都有模逆。我们说过，x是可逆的
inverse. And we said that actually X is
invertible if and only if it's relatively

28
00:02:00,925 --> 00:02:05,928
当且仅当x与N互质。进一步地，我还告诉过大家
Z_N^*中可逆元素的数目
prime to N. Moreover, I also told you that
the number of invertible elements in ZN

29
00:02:05,928 --> 00:02:11,147
由这个函数ψ(N)表示。那么ψ(N)是Z_N^*中可逆元素的数目
star is denoted by this function phi(N). So phi(N)
is the number of invertible elements in ZN

30
00:02:11,147 --> 00:02:15,814
我告诉过大家，当N是两个不同的质数的乘积时
star, And I told you that when N is a
product of two distinct primes, then in

31
00:02:15,814 --> 00:02:20,788
那么事实上ψ(N)=(p-1)(q-1)，如果把它展开
fact phi(N) is equal to (P - 1) times (Q - 1) and if you extend that out, you

32
00:02:20,788 --> 00:02:26,007
它就等于(N-p-q-1)。现在记得我说过
see that this is really equal to (N - P - Q + 1). Now remember that I said

33
00:02:26,007 --> 00:02:30,858
p和q约为N的平方根大小，意味着
that P and Q are on the order of square
root of N which means that P + Q is

34
00:02:30,858 --> 00:02:35,675
p+q也大约是N的平方根大小，意味着ψ(N)
also on the order of square root of N.
Which means that really phi(N) is on the

35
00:02:35,675 --> 00:02:41,050
大小大约是N-2√N。那么换句话说，ψ(N)与N很接近
order of N minus two square root of N. So,
in other words, it's very, very close to

36
00:02:41,050 --> 00:02:45,158
减去一个N的平方根
N. Basically, subtracting the square root
of N from a number, this is from, N is

37
00:02:45,158 --> 00:02:49,425
这里N将是一个大数，约600十进制位
going to be a huge number in our case,
like 600 digits. And so subtracting from a

38
00:02:49,425 --> 00:02:53,533
那么一个600位数减去一个600位数的平方根，也就是大约300位
600 digit number, the square root of that
600 digit number, namely a 300 digit

39
00:02:53,533 --> 00:02:57,534
是很难影响这个数的大小的，意味着
number, hardly affects the size of the
number. Which means that phi(N) is really,

40
00:02:57,534 --> 00:03:01,908
ψ(N)其实和N很接近，我想让大家记住
really, really close to N, and I want you
to remember that, because we will actually

41
00:03:01,908 --> 00:03:06,122
因为我们现在会使用这点，那么ψ(N)很接近N的事实
be using this now and again. And so the
fact that phi(N) is really close to N, means

42
00:03:06,122 --> 00:03:11,094
意味着如果我们选取模N中的随机元素，非常有可能
that if we choose a random element modulo
N It's very, very, very likely to be in ZN

43
00:03:11,094 --> 00:03:15,633
这个元素也在Z_N^*中，非常不可能选择一个Z_N中的随机元素
star. So it's very unlikely that by
choosing a random element in ZN, we will

44
00:03:15,633 --> 00:03:20,085
得到的元素却不是可逆的。好，那么记住这点
end up choosing an element that is not
invertable. Okay. So just remember that,

45
00:03:20,085 --> 00:03:25,479
事实上几乎所有的Z_N中的元素都是可逆的
that in fact almost all elements in ZN are
actually invertible. And the last thing

46
00:03:25,479 --> 00:03:30,939
最后我们需要的是欧拉定理，我们上周讲的
that we'll need is Euler's theorem, which
we covered last week, which basically says

47
00:03:30,939 --> 00:03:36,332
这定理是说，对于Z_N^*中的任意元素x，如果我计算
x的ψ(N)次方，我会在Z_N中得到1
that for any element X in ZN star, if I
raise X to the power of phi(N), I get one, in

48
00:03:36,332 --> 00:03:42,527
那么换句话说，我获得1模N，我会再说一遍
ZN. So in other words, I get 1 modulo N. I'll say it one more time because this

49
00:03:42,527 --> 00:03:47,466
因为这个对接下来的内容至关重要。x^ψ(N)=1 mod N
is gonna be critical to what's coming.
Again X to the phi(N) is equal to 1 modulo

50
00:03:47,466 --> 00:03:51,997
现在我们有了必要的背景知识，我们可以描述
N. So now that we have the necessary
background we can actually describe the

51
00:03:51,997 --> 00:03:55,927
RSA陷门置换了。这是一个经典的密码学机制
RSA trapdoor permutation. This is a classic,
classic, classic construction in

52
00:03:55,927 --> 00:04:00,811
首先于1977年在科学美国人上发表
cryptography that was first published in
Scientific American back in 1977, this is

53
00:04:00,811 --> 00:04:05,576
这是密码学里的一篇著名论文。在那之后，已经35年了
a very well known article in cryptography.
And ever since then, this was 35 years

54
00:04:05,576 --> 00:04:10,340
RSA陷门置换在密码学应用中被广泛使用
ago, the RSA trapdoor permutation has been used
extensively in cryptographic applications.

55
00:04:10,340 --> 00:04:15,110
例如，SSL和TLS都使用了RSA，用于证书和密钥交换
For example, SSL and TLS use RSA both for
certificates and for key exchange. There

56
00:04:15,110 --> 00:04:19,452
有很多安全的电子邮件系统和安全的文件系统，使用了RSA
are many secure email systems and secure
file systems that use RSA to encrypt

57
00:04:19,452 --> 00:04:23,515
加密电子邮件和文件系统里的文件。这个系统里
emails and encrypt files in the file
system. And there are many, many, many

58
00:04:23,515 --> 00:04:27,690
有很多其他应用。那么这是一个非常经典的密码学机制
other applications of this system. So this
is a very, very classic, crypto

59
00:04:27,690 --> 00:04:32,541
我会给大家展示它是如何工作的。我应当说
construction, and I'll show you how it
works. I should say that RSA is named for

60
00:04:32,541 --> 00:04:37,150
RSA由他的发明人R.Rivest，A.Shamir和L.Adleman命名
its inventors, Ron Rivest, Adi Shamir and
Len Adleman, who were all at MIT at the

61
00:04:37,150 --> 00:04:41,758
他们在麻省理工做出了这一重要发现。
现在我们准备描述RSA陷门置换
time they made this important discovery.
So now we're ready to describe the RSA

62
00:04:41,758 --> 00:04:46,425
为了做到这点，我必须描述这个密钥生成算法
trapdoor permutation. To do that, I have
to describe the key generation algorithm,

63
00:04:46,425 --> 00:04:50,159
函数f和你函数f^-1。我们来看
the function ? and the function ??1.
So let's see. So the way the key

64
00:04:50,159 --> 00:04:54,826
密钥生成算法如下工作：我们生成两个质数
generation algorithm works is as follows:
What we do is we generate two primes, P

65
00:04:54,826 --> 00:04:59,143
p和q，每个大约是1000位，约300十进制位
and Q, each would be, say on the order of
1000 bits, so, you know, roughly 300

66
00:04:59,143 --> 00:05:03,751
然后RSA模就是这两个质数的乘积
digits, and then the RSA modulus is simply
going to be the product of those two

67
00:05:03,751 --> 00:05:08,801
接下来我们选取两个指数e和d
primes. The next thing we do is we pick
two exponents, e and d, such that e times

68
00:05:08,801 --> 00:05:13,894
满足e乘d等于1模ψ(N)。这意味着e和d首先
d is 1 modulo phi(N). What this means is
that e and d first of all are relatively

69
00:05:13,894 --> 00:05:19,051
必须与ψ(N)互质，其次，它们必须互为模ψ(N)的逆
prime to phi(N) and second of all they're
actually modular inverses of one another,

70
00:05:19,051 --> 00:05:24,014
然后我们输出公钥为(N,e)
modulo phi(N). And then we output the public
key as the pair N,e and the

71
00:05:24,014 --> 00:05:29,172
而私钥是(N,d)。我应该说一下这个指数e
secret key is the secret key N,d. I should mention that the exponent e,

72
00:05:29,172 --> 00:05:34,586
这个e有时被称为加密指数
that the number e is sometimes called the
encryption exponent and the exponent d is

73
00:05:34,586 --> 00:05:39,135
而指数d有时被叫做解密指数。大家会看到
sometimes called the decryption exponent.
And you'll see why I keep referring to

74
00:05:39,135 --> 00:05:43,189
我马上会一直用这些指数。现在RSA函数本身的定义
these as exponents in just a second. Now
the way the RSA function itself is

75
00:05:43,189 --> 00:05:46,902
是很简单的。为求简便，我将把它定义成
defined is really simple. For simplicity
I'm gonna define it as the function

76
00:05:46,902 --> 00:05:51,801
从Z_N^*到Z_N^*的函数。这个函数
from ZN star to ZN star. And the way
the function is defined is simply given an

77
00:05:51,801 --> 00:05:57,001
有输入x，我们只需取x，计算在Z_N中x的e次方
input X, all we do is we simply take X and
raise it to the power of e in ZN. So we

78
00:05:57,001 --> 00:06:02,137
那么我们只需计算x^e mod N。就行了。解密时
just compute X to the e, modulo N. That's
it. And then to decrypt, what we do is we

79
00:06:02,137 --> 00:06:07,451
我们只需给定输入y，计算y的d次方模N就行了
simply, given an input Y, we simply raise
Y to the power of d, modulo N. And that's

80
00:06:07,451 --> 00:06:12,483
那么现在大家可以看到，为什么我要说指数e和d
it. So now you can see why as I refer to e
and d as exponents. They're the things

81
00:06:12,483 --> 00:06:17,767
它们是x和y的指数。那么我们快速验证一下f^-1
that X and Y are being raised to. So let's
quickly verify that F inverse really does

82
00:06:17,767 --> 00:06:22,673
确实是函数f的逆。那么我们看当我们计算y^d时会发生什么
invert the function F. So let's see what
happens when we compute Y to the d. So

83
00:06:22,673 --> 00:06:27,515
假设y本身正好是RSA函数在某个值x处的值
suppose Y itself happens to be the RSA
function of some value X. In which case,

84
00:06:27,515 --> 00:06:33,045
这时y^d就是RSA(x)^d，而x本身
what Y to the d is, is really RSA of X to
the power of d. While X by itself is

85
00:06:33,045 --> 00:06:39,006
将变成x^e mod N，因此，y^d就是x^(ed) mod N
simply gonna be X to the e modulo N, And
therefore, Y to the d is simply X to the e

86
00:06:39,006 --> 00:06:44,896
这里又使用了指数规则，将指数相乘了
times d modulo N. Again, just using rules
of exponentiation, the exponents multiply,

87
00:06:44,896 --> 00:06:50,857
那么我们获得x^(ed)。关于e乘d我们知道什么？
so we get X to the e times d. But what do
we know about e times d? e times d we said

88
00:06:50,857 --> 00:06:57,390
我们说过，e乘d是1模ψ(N)，这意味着存在某个整数k
is one modulo phi(N). And what that means is
there exists some integer such that e

89
00:06:57,390 --> 00:07:04,177
满足ed = kψ(N)+1，这是ed = 1 mod ψ(N)的意义
times d is equal to K times phi(N) plus one.
This is what it means that e times d is

90
00:07:04,177 --> 00:07:09,820
那么我们可以用kψ(N)+1替换ed
one modulo phi(N). So, we can simply replace e
times d by K times phi(N)+1. So, that's

91
00:07:09,820 --> 00:07:14,453
那么我写在这。我们有x^(kψ(N)+1)
what I wrote here. So, we have X to the
power of K times phi(N)+1. But now again

92
00:07:14,453 --> 00:07:19,868
现在再使用指数规则，我们可以重写这个式子，
变成(x^ψ(N))^k*x
just using rules of exponentiation, we can
re-write this as X to the power of phi(N) to

93
00:07:19,868 --> 00:07:24,827
这与kψ(N)+1作为指数是一回事
the power of K times X. This is really the
same thing as K times phi(N)+1 as the

94
00:07:24,827 --> 00:07:29,917
我只是把指数分到了不同的项上
exponent. I just kind of separated the
exponent into it's different components.

95
00:07:29,917 --> 00:07:35,137
现在x^ψ(N)根据欧拉定理，我们知道ψ(N)=1
Now, X to the phi(N) by Euler's theorem, we know
that X to the phi(N) is equal to one. So what

96
00:07:35,137 --> 00:07:41,394
那么整个乘积等于什么？由于x^ψ(N)=1
is this whole product equal to? Well since
X to the phi(N) is equal to one, one to

97
00:07:41,394 --> 00:07:45,961
1的k次方是1，所以整个这一项就等于1
the K is also equal to one, so this whole
thing over here is simply equal to one.

98
00:07:45,961 --> 00:07:50,757
我们留下的只有x了。所以我们刚刚证明了
And what we're left with is X. So what we
just proved is that if I take the output of

99
00:07:50,757 --> 00:07:55,210
如果我取RSA函数的输出，然后计算它的d次方，我能得到x
the RSA function and raise it to the power
of 'd', I get back X. Which means that

100
00:07:55,210 --> 00:07:59,663
这意味着计算d次方就是RSA的逆
raising to the power of 'd' basically
inverts the RSA function, which is what we

101
00:07:59,663 --> 00:08:04,638
这是我们想证明的。那么完事了，这就是RSA函数的全部描述
wanted to show. So that's it, that's the
whole description of the function, we've

102
00:08:04,638 --> 00:08:08,972
我们已经描述了密钥生成，陷门函数本身，即计算
described the key generation. The function
itself, which is simply raising things to

103
00:08:08,972 --> 00:08:13,410
数的e次方模N，以及陷门函数的逆，即计算
the power of e modulo N, and the inversion
function which is simply raising things to

104
00:08:13,410 --> 00:08:17,483
数的d次方模N。下个问题是，为什么这个函数是安全的？
the power of d, also modulo N. The next
question is, why is this function secure?

105
00:08:17,483 --> 00:08:21,609
换句话说，为什么这个函数是单向的，如果我只有公钥
In other words, why is this function one
way if all I have is just a public key,

106
00:08:21,609 --> 00:08:26,409
没有私钥的话？为了证明这个函数是单向的
but I don't have the secret key? And so to
argue that this function is one way we

107
00:08:26,409 --> 00:08:31,454
我们表述这个RSA假设，告诉我们RSA函数
basically state the RSA assumption which
basically says that the RSA function is a

108
00:08:31,454 --> 00:08:36,626
是一个单向置换。形式化地，我们说
one way permutation. And formally the way
we state that is that, basically for all

109
00:08:36,626 --> 00:08:41,416
对所有有效的算法A，如果我生成两个指数p和q
efficient algorithms, A, it so happens
that if I generate two primes p and q,

110
00:08:41,416 --> 00:08:46,397
随机的质数p和q，我把它们乘起来，获得模N
random primes p and q. I multiply them to
get to modulus N and then I choose a

111
00:08:46,397 --> 00:08:51,103
然后我随机选择一个Z_N^*中的y，现在我给了模N，指数
random 'y' in ZN star. And now I give
the modulus, the exponent and this 'y' to
(这里的指数e由公钥指定)

112
00:08:51,103 --> 00:08:55,893
和这个y给算法A，我会得到RSA在点y的逆的概率
algorithm A, the probability that I'll get
the inverse of RSA at the point Y, mainly

113
00:08:55,893 --> 00:09:00,336
即得到y^(1/e)，真正的逆
I'll get Y to the power of one over E.
That's really what the inverse is. This

114
00:09:00,336 --> 00:09:04,606
这个概率是可忽略的。那么这个假设叫做RSA假设
probability is negligible. So this
assumption is called the RSA assumption.

115
00:09:04,606 --> 00:09:09,338
它是说，给定公钥，RSA是一个单向置换
It basically states that RSA is a one way
permutation just given the public key. And

116
00:09:09,338 --> 00:09:13,954
因此，它是一个陷门置换，因为它有陷门
therefore, it is a trapdoor permutation
because it has a trapdoor. And makes this
(这里的陷门指的是私钥里的d)

117
00:09:13,954 --> 00:09:19,501
这个陷门使得凡是知道陷门的人，可以很容易地求逆
easy to invert for anyone who knows the
trap door. So now that we have a secure

118
00:09:19,501 --> 00:09:23,717
现在我们有了一个安全的陷门置换，我们可以
把这个陷门置换带入我们的公钥加密机制
trap door permutation, we can simply plug
that into our construction for public key

119
00:09:23,717 --> 00:09:27,826
获得我们的第一个真实的公钥加密系统
encryption, and get our first real world
public key encryption system. And so what

120
00:09:27,826 --> 00:09:32,362
那么我们就把这个RSA陷门置换带入ISO标准机制
we'll do is we'll simply plug the, the RSA
trapdoor permutation into the ISO standard

121
00:09:32,362 --> 00:09:36,151
也就是我们上一节讲的机制。那么如果大家还记得
construction that we saw in the previous
segment. So, if you recall, that

122
00:09:36,151 --> 00:09:40,207
那个机制是基于一个必须提供认证加密的对称加密系统的
construction was based on a symmetric
encryption system that had to provide

123
00:09:40,207 --> 00:09:44,438
它还是基于一个哈希函数的
authenticated encryption. And it was also
based on a hash function. Then mapped

124
00:09:44,615 --> 00:09:48,866
从RSA的角度看，这个哈希函数把Z_N里的元素
while transferring it into the world of
RSA, it maps elements in

125
00:09:48,866 --> 00:09:54,202
映射到对称密钥系统的密钥
ZN, into secret keys for the
symmetric key system. And now the

126
00:09:54,202 --> 00:09:58,947
现在加密机制的工作方式是容易描述的
way the encryption scheme works is really
easy to describe. Basically algorithm G

127
00:09:58,947 --> 00:10:03,751
算法G就运行RSA的密钥生成算法，产生一个公钥和一个私钥
just runs the RSA key generation algorithm
and produces a public key and a secret

128
00:10:03,751 --> 00:10:07,813
与之前一样。那么大家注意到，这个公钥包含了
key. Just as before. So you notice the
public key contains the encryption

129
00:10:07,813 --> 00:10:11,948
加密指数，而这个私钥包含了解密指数
exponent and the secret key contains the
decryption exponent. And the way we

130
00:10:11,948 --> 00:10:16,298
我们加密的过程如下：我们随机选择一个Z_N中的元素x
encrypt is as follows. Well, we're going
to choose a random X in ZN. We're going

131
00:10:16,298 --> 00:10:21,468
我们对x应用RSA函数。我们先推导出一个对称密钥
to apply the RSA function to this X, we're
going to deduce a symmetric key from this

132
00:10:21,468 --> 00:10:26,453
通过对x取哈希，那么我们计算H(x)以获得密钥k
X by hashing it, so we compute H of X to
obtain the key K, and then we output this

133
00:10:26,453 --> 00:10:31,130
然后我们输出这个y和使用对称密钥k加密后的信息
Y along with the encryption of the message
under the symmetric key K. And in

134
00:10:31,130 --> 00:10:35,930
在实际中，这个哈希函数H使用SHA-256实现
practice, the hash function H would be
just implemented just using SHA-256, and

135
00:10:35,930 --> 00:10:40,977
大家会使用SHA-256的输出，来生成对称密钥
you would use the output of SHA-256 to
generate a symmetric key that could then

136
00:10:40,977 --> 00:10:45,687
然后使用这个对称密钥作为对称加密的助手
be used for the symmetric encryption
assistant. So that's how we would encrypt

137
00:10:45,687 --> 00:10:50,084
那么我们会加密，然后解密，与之前章节里别无二致
and then the way we would decrypt is
pretty much as we saw in the previous

138
00:10:50,084 --> 00:10:54,951
首先，我们使用密钥
segment, where the first thing we would do
is we would use the secret key to invert

139
00:10:54,951 --> 00:10:59,758
来求密文开头的逆，那么我们会计算y的RSA逆
the header of the ciphertext. So we would
compute RSA invert of Y, that would give

140
00:10:59,758 --> 00:11:04,566
这会给我们值x，那么我们对x应用哈希函数
us the value X. Then we would apply the
hash function to X so that this would give

141
00:11:04,566 --> 00:11:09,198
会得到密钥k。然后我们运行对称系统的解密算法
us the key K. And then we would run the
decryption algorithm for the symmetric

142
00:11:09,198 --> 00:11:15,171
来解密密文，会产生最初的明文m
system on the ciphertext and that would
produce the original message m. And then

143
00:11:15,171 --> 00:11:19,103
然后我们陈述上一节里的一个定理，是说
we stated a theorem in the previous
segment to say that if the RSA trapdoor

144
00:11:19,103 --> 00:11:23,087
如果RSA陷门置换是安全的，对称加密机制
permutation is secure, Es and Ds, the
symmetric encryption scheme has

145
00:11:23,087 --> 00:11:27,175
提供了认证加密，我们说过，H是随机神谕
provided authenticated encryption. And as
we said, H is just random oracle. It's,

146
00:11:27,332 --> 00:11:31,421
H是某个从Z_N映射到密钥空间的随机函数。那么事实上
you know, kind of a random function from
ZN to the key space. Then, in fact, this

147
00:11:31,421 --> 00:11:35,720
这个系统是选择密文安全的，是一个很好的可使用的公钥系统
system is chosen cipher text secure, and
is a good public key system to use.

148
00:11:36,240 --> 00:11:41,729
那么现在我们有了第一个好的可使用的公钥系统
So now that we have our first example of a
good public key system to use, I wanna

149
00:11:41,729 --> 00:11:46,978
我想快速地警告大家，不要用RSA去加密
quickly warn you about how not to use RSA
for encryption. And this again something

150
00:11:46,978 --> 00:11:51,101
我们上一节已经讲过这点了。我这里再重复一遍
that we said in the previous segment. And
I'm going to repeat it here, except I'm

151
00:11:51,101 --> 00:11:55,534
我要针对RSA再讲一遍。那么我想把这个叫做教科书RSA
going to make it specific to RSA. So
I'd like to call this, textbook RSA.

152
00:11:55,534 --> 00:11:59,400
这是我们提到RSA加密时，第一个想到的方案
Which basically is the first thing that
comes to mind when you think about

153
00:11:59,400 --> 00:12:03,678
私钥和公钥与之前一样
encrypting using RSA, namely, the secret
key and the public key will be as before.

154
00:12:03,678 --> 00:12:08,162
但现在不是通过哈希函数来生成对称密钥
But now instead of running through, a hash
function to generate a symmetric key, what

155
00:12:08,162 --> 00:12:12,337
我们直接使用RSA来加密给定的明文M
we would do is we would directly use RSA
to encrypt the given message M. And then

156
00:12:12,337 --> 00:12:16,202
然后我们直接使用解密指数来解密密文
we would directly use the decryption
exponent to decrypt the cipher text and

157
00:12:16,202 --> 00:12:20,773
获得明文M。我把这个叫做教科书RSA
obtain the plain text M. I'm going to call
this textbook RSA, because there are many

158
00:12:20,773 --> 00:12:25,350
因为很多教科书就是这样描述RSA加密的，这是完全错误的
textbooks that describe RSA encryption in
this way. And this is completely wrong.
(比如Stinson的著名密码学教材第三版里的例子5.5)

159
00:12:25,350 --> 00:12:29,495
这并不是RSA加密的工作过程，这是不安全的系统
This is not how RSA encryption works.
It's an insecure system. In particular,
(可能是受RSA原作者给出的例子影响，情有可原)

160
00:12:29,495 --> 00:12:33,936
特别地，这是一个确定的加密，因此它不可能是语义安全的
it's deterministic encryption, and so it
can't possibly be semantically secure, but

161
00:12:33,936 --> 00:12:38,542
事实上，有很多攻击存在，我待会就会给大家看一个
in fact there are many attacks exist that
I'm going to show you an attack in just a

162
00:12:38,542 --> 00:12:42,709
但我想说清楚的一点是
minute, but the message that I want to
make clear here, is that RSA, all it is,

163
00:12:42,709 --> 00:12:47,151
RSA是一个陷门置换，本身不是一个加密系统
is a trap door permutation. By itself
it's not an encryption system. You have to

164
00:12:47,151 --> 00:12:51,427
大家必须用这个ISO标准为例，来完善它，使之成为
embellish it with this ISO standard for
example, to make it into an encryption

165
00:12:51,427 --> 00:12:55,826
一个加密系统。而其本身仅为一个函数。
那么我们来看会发生什么错误
system. By itself, all it is, is just a
function. So let's see what goes wrong if

166
00:12:55,826 --> 00:13:00,225
如果你试图使用教科书RSA，换句话说，
如果你试图直接使用RSA来加密一个明文
you try to use textbook RSA, In other
words, if you try to encrypt a message

167
00:13:00,225 --> 00:13:04,975
我会给你一个网络世界中的攻击的例子
using RSA directly. And I'll give you an
example attack from the world of the web.

168
00:13:04,975 --> 00:13:09,725
设想我们有一个网页服务器，这个服务器有RSA私钥
So imagine we have a web server. The web
server has an RSA secret key. Here's it's

169
00:13:09,725 --> 00:13:14,738
私钥记为(N,d)。这里我们有一个网页浏览器，
浏览器试图与网页服务器建立起一个安全的会话
denoted by N and D. And here we have a web
browser who's trying to establish a secure

170
00:13:14,738 --> 00:13:19,124
一个安全的SSL会话。那么SSL工作的方式是
session, a secure SSL session, with the web
server. So the way SSL works is that the

171
00:13:19,124 --> 00:13:23,401
网页浏览器开始时发送这个客户端hello消息
web browser starts off by sending this
client hello message saying, hey, I want

172
00:13:23,401 --> 00:13:27,787
我想和你建立一个安全会话。网页服务器回复一个
to set up a secure session with you. The
web server responds with a server hello

173
00:13:27,787 --> 00:13:32,430
服务端hello消息，其中包含了服务器的公钥。
然后网页浏览器会生成一个随机数
message that contains the server's public
key. And then the web browser will go ahead

174
00:13:32,430 --> 00:13:36,615
这个随机数叫做预备主密钥K
and generate a random what's called a
premaster secret K, it will encrypt the

175
00:13:36,615 --> 00:13:40,692
它加密预备主密钥K，然后把结果以密文形式
premaster secret using K and send the
result in ciphertext over to the web
(这里不该说using，因为是直接使用RSA进行的加密)

176
00:13:40,692 --> 00:13:44,932
发送给网页服务器。服务器会解密，然后也会获得K
server. The web server will decrypt and
then the web server will also get K, so

177
00:13:44,932 --> 00:13:49,336
那么现在双方都有了共享密钥，他们可以使用它来安全会话
now the two have a shared key that they
can use to then secure a session between

178
00:13:49,336 --> 00:13:53,630
那么我想告诉大家，如果我们直接使用RSA函数加密K
them. So I want to show you what goes
wrong if we directly use the RSA function

179
00:13:53,630 --> 00:13:57,762
会发生什么错误。换句话说，如果K直接加密成
for encrypting K. In other words, if
directly K is encrypted as K to the e

180
00:13:57,762 --> 00:14:02,828
K^e mod N的话，为了论证方便，我们假设K是一个64位密钥
modulo N. Just for the sake of argument
let's suppose that K is a 64-bit key.

181
00:14:02,828 --> 00:14:08,097
我们把K当作范围从0到2^64的一个整数
We're going to treat K as an integer in
the range as zero to 2 to the 64.

182
00:14:08,097 --> 00:14:13,100
更为精确地，2^64 - 1，现在我们做如下事情
More precisely two to the 64 minus one,
and now what we're going to do is the

183
00:14:13,100 --> 00:14:18,302
首先，假设K正好能分解成几个差不多大小的数的乘积
following. First of all, suppose it so
happens that K factors into a product of

184
00:14:18,302 --> 00:14:23,705
那么我们可以把K写成K1乘K2，K1和K2是整数
roughly equal sized numbers. So K we can
write as K1 times K2, where K1 and K2 are

185
00:14:23,705 --> 00:14:29,745
比如说，两个都小于2的34次方。那么实际上
integers. And both are say less than two
to the 34. So, it turns out this happens

186
00:14:29,745 --> 00:14:34,508
这有20%的概率会发生，那么5次中会有一次
with probability roughly twenty percent so
one in five times K can actually be

187
00:14:34,508 --> 00:14:39,740
K可以被写成这样。但现在如果我们把这个K=K1*K2
written in this way. But, now if we plug
this K, K=K1 x K2 if we plug that into the

188
00:14:39,740 --> 00:14:45,241
带入到定义密文的函数中，大家就会发现，
我们把K替换成K1乘K2
equation that defines the cipher text you
see that we can simply substitute K by K1 x k2

189
00:14:45,241 --> 00:14:50,875
然后我们可以把K1移到另一边，这样我们会得到这个方程
and then we can move k1 to the other side.
So then we end up with this equation here,

190
00:14:50,875 --> 00:14:55,897
即C/(K1^e)=K2^e。大家注意，如果我两边都乘以K1^e
namely C over K1 to the e is equal to K2 to the e. You notice if I multiply both

191
00:14:55,897 --> 00:15:00,659
我得到C=(K1K2)^e
sides by K1 to the e, I get that C is
equal to K1 times K2 to the e,

192
00:15:00,659 --> 00:15:06,374
就是这里的方程。我只是用K1*K2替换了K
which is precisely this equation here.
Okay, so all I did is I just replaced K by

193
00:15:06,374 --> 00:15:11,955
然后除以K1^e。现在这个，大家看起来有点熟悉
K1 times K2 and then divided by K1 to the
e. So by now this should look familiar to

194
00:15:11,955 --> 00:15:16,146
当然在这个方程中，我们有两个变量
you. So now we have two variables in this
equation, of course. C is known to the

195
00:15:16,146 --> 00:15:20,092
攻击者知道C，知道e，也知道N
attacker, E is known to the attacker, and
N is known to the attacker. The two

196
00:15:20,092 --> 00:15:24,518
这个方程里的两个变量是K1和K2，我们把它们
variables in this equation are K1 and
K2, and we've separated them into a

197
00:15:24,518 --> 00:15:28,891
分在了方程的两边，因此我们现在可以利用这个方程
different side of the equation, and as a
result we can do now a meet in the middle

198
00:15:28,891 --> 00:15:33,157
进行中间相遇攻击了。那么我们来进行中间相遇攻击
attack on this equation. So let's do the
meet in the middle attack. What we would

199
00:15:33,157 --> 00:15:37,524
我们构建一张表，里面存放左边的所有可能值
do is we would build a table of all
possible values Of the left-hand side. So

200
00:15:37,524 --> 00:15:43,392
C/(K1^e)的所有可能值，有2的34次方个
all possible values of C over K1 to the E,
there are 2 to the 34 of them. And then,

201
00:15:43,584 --> 00:15:48,878
然后对右边所有的可能值，对K2^e的所有可能值
for all possible values on the right-hand
side, then for all possible values

202
00:15:48,878 --> 00:15:54,175
我们检查这个值是否在我们第一步构建的表里
of K2 to the e, we're gonna check whether
this value here lives in the table that we

203
00:15:54,175 --> 00:15:58,749
如果在，我们就找到了一个碰撞
constructed in step one. And if it is then
we found a collision, and basically we

204
00:15:58,749 --> 00:16:03,265
我们就有了这个方程的一个解。那么
我们一旦找到了一个元素具有形式K2^e
have a solution to this equation. So as
soon as we find an element of the form K2

205
00:16:03,265 --> 00:16:07,962
这个元素在我们第一步构建的表里面
to the E that lives in the table that
we built in step one, we've solved this

206
00:16:07,962 --> 00:16:12,717
那么我们就已经解决了这个方程，并找到了K1和K2。
当然我们一旦找到K1和K2
equation and we found K1 and K2. And
of course once we found K1 and K2,

207
00:16:12,717 --> 00:16:16,950
我们可以很容易地还原K，通过简单地相乘K1和K2
we can easily recover K simply by
multiplying them. So then we multiply K1

208
00:16:16,950 --> 00:16:21,428
那么我们将K1乘K2，就能得到密钥K。我们就已经破解了
and K2 and we get, the secret key
K. Okay? So, we've broken, basically,

209
00:16:21,428 --> 00:16:25,604
这个加密系统。要花多少时间？暴力地搜索
this, this encryption system. And how long
did it take? Well, by brute force, we

210
00:16:25,604 --> 00:16:29,890
我们可以在2的64次方的时间里破解它，
通过简单地尝试所有可能的密钥
could have broken it in time 2 to the 64,
simply by trying all possible keys. But

211
00:16:29,890 --> 00:16:33,792
但大家注意，这个攻击花了2的34次方的时间做第一步
this attack, you notice, it took 2 to
the 34 time for step number one. Well, it

212
00:16:33,792 --> 00:16:38,353
其实它花的时间略多于2的34次方，
因为我们必须计算这些指数
took a little bit more than 2 to the 34,
'cause we had to do these exponentiations.

213
00:16:38,518 --> 00:16:42,969
它花了2的34次方的时间做第二步，
同样地，用时略多于2的34次方
It took 2 to the 34 time for step two,
again slightly more than two to the 34

214
00:16:42,969 --> 00:16:47,530
因为要做指数运算。那么我们说，整个算法用时2的40次方
because of the exponentiations. So let's
say that the whole algorithm took time two

215
00:16:47,530 --> 00:16:52,277
关键在于，这个比2的64次方的时间少得多
to the 40. The point is that this is much,
much less time due to the 64. So here you

216
00:16:52,277 --> 00:16:56,667
那么这里大家有了一个例子，如果你直接使用RSA加密
have an example. Where if you encrypt
using RSA directly, in other words you

217
00:16:56,667 --> 00:17:01,296
换句话说，直接计算K^e mod N，而不是通过ISO标准
directly compute, K to the E, mod N,
instead of going through the ISO standard,

218
00:17:01,296 --> 00:17:05,983
那么大家会获得一个攻击，可以比穷举快得多
for example, then you get an attack that
runs much faster than exhaustive search.

219
00:17:05,983 --> 00:17:10,730
大家获得了一个用时2的40次方的攻击，远远快于2的64次方
You get an attack that runs in time two to
the 40, rather than time two to the 64.

220
00:17:10,730 --> 00:17:14,985
好，那么这个可爱的例子揭示了，如果直接使用
Okay, so this is a cute example of how
things can break if you use the RSA

221
00:17:14,985 --> 00:17:19,299
RSA陷门置换来加密明文，那么如何来破解系统的
trapdoor permutation directly to
encrypt a message. So the message to

222
00:17:19,299 --> 00:17:23,670
那么这里需要记住的要点是，永远不要直接用RSA去加密
remember here, is never, ever, ever use
RSA directly to encrypt. You have to use to go

223
00:17:23,670 --> 00:17:27,868
必须通过一个加密机制来使用它，比如ISO的标准
through an encryption mechanism. For
example, like the ISO standard. And in

224
00:17:27,868 --> 00:17:32,354
事实上，下一节我们将看到其他使用RSA的方法
fact, in the next segment we are going to
see other ways of using RSA to build

225
00:17:32,354 --> 00:17:33,620
来构建公钥加密
public key encryption.
