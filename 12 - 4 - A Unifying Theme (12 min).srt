1
00:00:00,000 --> 00:00:04,076
本周我们看了两个公钥加密系统类型
This week, we saw two families of public
encryption systems. One family was built

2
00:00:04,076 --> 00:00:08,204
一个是基于陷门函数的，特别是RSA
from trapdoor functions, and particularly
RSA, and the other family was built from

3
00:00:08,204 --> 00:00:12,078
另一类是基于Diffie-Hellman协议构建的。在这最后一节里
the Diffie-Hellman protocol. In this last
segment, I wanna show you that both

4
00:00:12,078 --> 00:00:16,065
我想给大家展示实际上这两类机制遵循着一个更一般的原理
families in fact follow from a more
general principle. The unifying theme is

5
00:00:16,065 --> 00:00:20,671
这个统一的主题叫做单向函数。那么什么是单向函数？
what's called a one-way function. So what
is a one-way function? Well, we've already

6
00:00:20,671 --> 00:00:24,995
我们之前已经简要地看过这一概念。它是一个函数
seen this concept briefly before. But
basically, a function from, one set to

7
00:00:24,995 --> 00:00:29,376
从一个集合映射到另一个集合，比如说从X到Y，
这个函数是单向的，如果事实上有一个有效的算法
another, say, from X to Y is said to be
one way, if, in fact, there's an efficient

8
00:00:29,376 --> 00:00:33,813
允许我们计算函数F。那么任何人都可以计算函数F
algorithm that allows us to evaluate the
function F. So anyone can evaluate the

9
00:00:33,813 --> 00:00:38,306
在他们选择的任一点的值。但是，求函数F的逆
function F at any point of their choice.
However, inverting the function F should

10
00:00:38,306 --> 00:00:42,406
应当是困难的。这就让这个函数是单向的了
be difficult. That's what makes the
function one way. So what do I mean by

11
00:00:42,406 --> 00:00:47,068
我的话是什么意思？大家可以把函数F想象成
that? Well, you can think of the function
F as a function again mapping the set X to

12
00:00:47,068 --> 00:00:52,165
从集合X到集合Y的映射，但许多X中的点实际上
the set Y. But it so happens in many
points in X could actually be mapped into

13
00:00:52,165 --> 00:00:57,228
可以被映射到Y中的单个点。现在当他们说，
这个函数求逆是困难的
a single point in Y. Now when they say
that the function is difficult to invert,

14
00:00:57,228 --> 00:01:02,347
意思是，当我给你某个Y中的点，我让你去找
what I mean is that when I give you some
point inside of Y and I ask you find me

15
00:01:02,347 --> 00:01:07,530
这个点的原像，你将无法指出这个点的任何一个原像
pre-image of this point, you won't be able
to point to any of these as a pre-image.

16
00:01:07,530 --> 00:01:12,838
换句话说，没有有效算法可以找到任何给定Y中的点的
In other words, no efficient algorithm can
find any point that is the inverse of the

17
00:01:12,838 --> 00:01:17,958
原像。现在我们说的更准确点，对于所有
given point Y. Now the way we say that
more precisely is that we say that for all

18
00:01:17,958 --> 00:01:23,203
有效算法A，如果我选择一个集合X中的随机元素x
efficient algorithm A, if I chose a random
X in the set, capital X, and now I'm gonna

19
00:01:23,203 --> 00:01:28,839
现在我把f(x)给算法A，然后我让算法A
give f(x) to algorithm A. And then, what
I'm gonna ask algorithm A to do, is

20
00:01:28,839 --> 00:01:34,774
去产生一个点f(x)的原像。A产生点f(x)的一个原像
basically produce a pre-image of the point
f(x). Well, what does it mean that A

21
00:01:34,774 --> 00:01:41,030
是什么意思？它的意思是，如果我应用函数f
produced a pre-image of the point f(x)? It
means that if I apply the function f to

22
00:01:41,030 --> 00:01:47,180
对A的输出进行作用，我应该可以重新获得f(x)
the output of A, what I should get back
is, well, f(x). Let's think through this

23
00:01:47,180 --> 00:01:52,428
我们再讲一般。那么我选择一个X中的随机点x
one more time. So I chose a random point x
in Capital X. You know I give algorithm A

24
00:01:52,428 --> 00:01:57,486
我给算法A以f(x)。那么我把这个点给算法A。现在
f(x). So I'm gonna give algorithm A this
point here. And now A is gonna produce

25
00:01:57,486 --> 00:02:02,291
A将产生某些点。那么我们假定A产生这里的这个点
some points. So let's pretend that A
produces this point over here. And now I

26
00:02:02,291 --> 00:02:07,349
现在我想说如果我对这个点应用函数F，那么A
wanna say that if I apply the function F
to this point here, that A produced, the

27
00:02:07,349 --> 00:02:12,471
给我输出的点与最初的x一样的概率是可忽略的
probability that I get the same point that
I started with is negligible. In other

28
00:02:12,471 --> 00:02:17,558
换句话说，算法能产生这三个点中的一个的概率
words the probability that algorithm A
was able to produce one of these three points is, in

29
00:02:17,558 --> 00:02:23,203
实际上是可忽略的。他只能产生某个其他的点
fact, negligible. All he can do is produce
some other point that maps into something

30
00:02:23,203 --> 00:02:28,440
其映射结果不是f(x)，对吧？所有这些都是在试图抓住
other than f(x), okay? So, again, all
this is trying to do is just capture the

31
00:02:28,440 --> 00:02:33,814
给定f(x)，很难找到f(x)的原像这一事实
fact that given f(x), it's hard to find
some pre-image of f(x). So here's some

32
00:02:33,814 --> 00:02:38,119
这里有一些这样的函数的简单例子，它们不是单向的
easy examples of functions that are not
one-way. For example, the identity

33
00:02:38,119 --> 00:02:42,955
比如恒等函数f(x)=x是简单的，不是单向的，因为
function f(x) is equal to x is trivially
not one way because given f(x), I can

34
00:02:42,955 --> 00:02:47,850
有了f(x)，我可以轻易地指出f(x)的逆，即x
easily come up with an inverse of f(x),
namely x. Similarly the function that will

35
00:02:47,850 --> 00:02:52,449
类似地，把一切都映射到0的函数也不是单向的。
在我们的图里，设有一函数
maps everything to zero is also not one
way. So in our picture, let the function

36
00:02:52,449 --> 00:02:57,167
将一切都映射成0，看起来如下。它把所有点
maps everything to zero simply looks as
follows. It takes all its points and maps

37
00:02:57,167 --> 00:03:02,133
都映射到单个点。这个函数不是单向的
them all to a single point. Well this
function is not one way because if I give

38
00:03:02,133 --> 00:03:07,324
因为我给你了像里的这个点，容易找出一个原像
you this point in the image, it's trivial
to find the pre-image. Namely, just pick
(严格地说，这里应该是 <font color="red">a</font> pre-image)

39
00:03:07,324 --> 00:03:12,579
只要选取X中的任一点，都会是0的原像
any point in capital X, and there will be
a pre-image of zero. And so, f(x) equal

40
00:03:12,579 --> 00:03:17,185
那么f(x)=0并非单向函数。顺便一说，这里我不想严格地
to zero is also not a one-way function.
And by the way, I didn't want to do it

41
00:03:17,185 --> 00:03:21,337
定义单向函数，但如果我要形式化地给出定义
here. But if I define one-way functions
more formally, then it turns out that

42
00:03:21,337 --> 00:03:25,707
那么实际上要证明单向函数是否存在，
我们就必须证明P不等于NP
proving that one-way functions exist,
we'll have also proven that P is not equal

43
00:03:25,707 --> 00:03:29,805
因为我们目前不能证明P不等于NP
to NP. So, since we can't today, prove
that P is not equal to NP, basically we
(若P=NP，则公钥密码学将有根基危机)

44
00:03:29,805 --> 00:03:34,230
我们也不能证明单向函数的存在性。我们只是假设它们存在。
can't prove that one-way functions exist.
And we just have to assume that they do.

45
00:03:34,230 --> 00:03:38,305
那么我们看我们的第一个单向函数的例子
So let's look at our first example of a
1-way function. Or at least a presumed

46
00:03:38,305 --> 00:03:42,329
或至少假设为单向函数。那么我们使用一个
伪随机数发生器来构造它
1-way function. And so we're gonna build
it from a pseudo random generator. And

47
00:03:42,329 --> 00:03:46,559
假设我有一个函数F，从X映射到Y，
则有一个安全的伪随机数发生器
suppose I have a function F from x to y
there is a secure pseudo random generator.

48
00:03:46,559 --> 00:03:50,531
F的输出比输入长得多。还记得
So the output of F is much larger than
the input. Remember, a pseudo-random

49
00:03:50,531 --> 00:03:54,691
一个伪随机数发生器取一个小种子，
把它扩成了更长的输出
generator takes a small seed and expands
it into a much larger output. And for

50
00:03:54,691 --> 00:03:58,590
例如大家可以使用确定的计数器模式与AES
example you can, you know, the pseudo
random generator maybe is built using

51
00:03:58,590 --> 00:04:02,806
来构建伪随机数发生器。容易看出
deterministic counter mode out of AES.
Well, it's fairly easy to see that if, in

52
00:04:02,806 --> 00:04:06,541
如果事实上F是安全的伪随机数发生器，那么F事实上
fact, F is a secure pseudo random
generator, then F is in fact a one-way

53
00:04:06,547 --> 00:04:10,604
是一个单向函数。我们的第一个例子是直接由
function. So our first example of a
one-way function is directly built from a

54
00:04:10,604 --> 00:04:14,820
伪随机数发生器构造的。这是一个简单的证明
pseudo random generator. This is actually
kind of a trivial proof, so let's prove

55
00:04:14,820 --> 00:04:19,088
我们来证明它的逆否命题。
假设我有一个有效算法可以求F的逆
the contra positive. So suppose I have an
efficient algorithm that inverts F, okay?

56
00:04:19,088 --> 00:04:22,963
那么我要证明其逆否命题。假设F不是单向的
So I'm proving the contra positive.
Suppose F is not one way. Then A is an

57
00:04:22,963 --> 00:04:27,457
那么A是一个求F的逆的有效算法。
现在我需要构建一个算法B
efficient algorithm than an inverse F. And
now I need to build an algorithm B that

58
00:04:27,457 --> 00:04:32,301
来破解这个伪随机数发生器。好，那么我还是证逆否
breaks the pseudorandom generator. Ok, so I'm proving again by contra-positive. Okay so how do I break the

59
00:04:32,301 --> 00:04:38,500
我该如何破解这个伪随机数发生器呢？我们只要这么做
pseudo-random generator? Well, all we do
is the following. So algorithm B is given

60
00:04:38,500 --> 00:04:43,406
算法B有集合Y中的某个元素y，它做如下事情
some y in the set Y. And what it's gonna
do is the following, it's gonna try and

61
00:04:43,406 --> 00:04:47,608
算法B试着对输入y运行算法A。现在，如果y是
run algorithm A on the input y. And now,
well, if y is the output of the

62
00:04:47,608 --> 00:04:52,109
伪随机数发生器的输出，那么算法A就会输出种子
pseudorandom generator, then algorithm A
will output the seed, and namely

63
00:04:52,109 --> 00:04:56,861
即X中的一个元素，以不可忽略的概率
an element in X with, you know,
non-negligible probability. So what

64
00:04:56,861 --> 00:05:02,112
我们再次对算法A的输出应用这个伪随机数发生器
we'll do is we'll apply the pseudorandom
generator again to the output of algorithm

65
00:05:02,112 --> 00:05:06,989
如我所说，如果y是发生器的输出，然后A会输出种子
A. As I said, if y was the output of a
generator, then A will have output

66
00:05:06,989 --> 00:05:12,240
因为它能求伪随机数发生器的逆。那么如果我们
the seed cuz it inverted the pseudorandom
generator. So if we apply the pseudorandom

67
00:05:12,240 --> 00:05:17,429
对A的输出应用再次伪随机数发生器，
我们应该重新得到开始时的y
generator again to the output of A, what
we should get back is basically the y that

68
00:05:17,429 --> 00:05:23,012
好，那么如果这个条件成立的话，我们说
we started with. Okay, so if this
condition holds we're gonna say we're

69
00:05:23,012 --> 00:05:28,090
我们输出0，如果这个条件不成立，我们输出1
gonna output zero. And if this condition
doesn't hold, we're gonna output one

70
00:05:28,090 --> 00:05:32,955
完事了，这就是我们区分出伪随机数发生器的方法
otherwise. That's it, that's our
distinguisher against a pseudo-random

71
00:05:32,955 --> 00:05:37,383
那么如果我们的方法是，给定伪随机数发生器的输出y
generator. So if our distinguisher is
given a y that is the output of the pseudo

72
00:05:37,383 --> 00:05:41,755
那么以不可忽略的概率，我们的算法B
random generator, then with non-negligible
probability, our distinguisher B will

73
00:05:41,755 --> 00:05:46,238
输出0。但是如果给算法B一个真随机字符串
output zero. However, if our distinguisher
B is given a truly random string. Well, a

74
00:05:46,238 --> 00:05:50,832
一个真随机字符串不由发生器的任何种子生成
truly random string doesn't have any seed
that causes the generator to output that

75
00:05:50,832 --> 00:05:56,410
所以我们的区分算法就会输出1，以非常高的概率
string. And therefore our distinguishable
output one with again, with also very high

76
00:05:56,410 --> 00:06:01,291
我希望这里说清楚了。如果我们看所有可能的输出集合
probability. And again I hope that's
clear. Basically, if we look at the set of

77
00:06:01,291 --> 00:06:06,129
即集合Y中很少有元素
all possible outputs, namely the set Y,
very few of those outputs happened to

78
00:06:06,129 --> 00:06:10,370
是伪随机数发生器的输出
be the output of the pseudorandom
generator. So if we are just given an

79
00:06:10,370 --> 00:06:15,088
如果我们有个y，据说不是伪随机数发生器的输出
output y over hearsay, that's not the
output of the pseudorandom generator, then

80
00:06:15,088 --> 00:06:19,687
那么我们重新运行算法A。它不可能产生一个种子
we rerun algorithm A on it. It can't
possibly produce a seed that will output

81
00:06:19,687 --> 00:06:24,227
会输出这个带*的点，因为不存在这样的种子。因此
this point star because there is no
such seed. And as a result, since most

82
00:06:24,227 --> 00:06:28,945
由于大多数的点不在伪随机数发生器的像里
points actually are not in the image of
the pseudorandom generator, most points

83
00:06:28,945 --> 00:06:33,462
大部分的点没有种子，让发生器映射到它们
will not have a seed that, maps the
generator to them and there's also where

84
00:06:33,462 --> 00:06:38,130
我们有Y中的一个随机点，一个真均匀分布的随机点
we were given a random point in Y, a truly
uniform point in Y, our distinguishable B

85
00:06:38,130 --> 00:06:42,011
我们的区分算法B会以很高的概率输出1。
但是如果我们有
will output 1 with very high
probability. However, if we are given a

86
00:06:42,011 --> 00:06:46,679
一个伪随机数发生器的输出，那么算法A会输出
pseudo random output of a generator, then
algorithm A will output the corresponding

87
00:06:46,679 --> 00:06:51,235
对应的种子。当我们对这个种子应用发生器，
我们会获得最初的输出y
seed. When we apply the generator to that
seed, we'll get the initial output y and

88
00:06:51,235 --> 00:06:55,356
因此我们会以不可忽略的概率输出0
therefore we'll output zero with
non-negligible probability. Okay, so if A

89
00:06:55,356 --> 00:06:59,546
那么如果A可以求F的逆，那么B也可以破解发生器
was able to invert F, then B is able to
break the generator. And since the

90
00:06:59,546 --> 00:07:04,024
因为这个发生器是安全的，所以A不可能求F的逆
generator is secure, algorithm A can't
invert F. And in particular, no efficient

91
00:07:04,024 --> 00:07:08,559
特别地，没有有效算法可以求F的逆，因此F是一个单向函数
algorithm can invert F. And therefore, F
is a one-way function. Excellent, so this

92
00:07:08,559 --> 00:07:12,788
这一小点讨论了很长。我想给大家证实
is a long discussion of kind of a minor
point. But all I wanted to show you is

93
00:07:12,788 --> 00:07:16,562
事实上伪随机数发生器直接给了我们一个单向函数
that in fact, a pseudo-random generator
directly gives us a one-way function.

94
00:07:16,562 --> 00:07:20,633
不幸的是，这个单向函数没有特别的性质
Unfortunately, this one-way function has
no special properties. And what that means

95
00:07:20,633 --> 00:07:24,754
意思是说，实际上很难使用他，以进行密钥交换或公钥加密
is it's actually difficult to use it for
key exchange or for public key encryption.

96
00:07:24,754 --> 00:07:28,578
某种意义上，我们能做的最好的密钥交换
In some sense, the best key exchange we
can do with this, as far as we know, is

97
00:07:28,726 --> 00:07:32,868
目前我们知道的是Merkle谜题。那么现在我们看第二个例子
Merkle puzzles. So now let's look at
our second example. The second example is

98
00:07:32,868 --> 00:07:37,200
第二个例子是，我们称离散对数是单向函数。
那么我们固定选取一个群
what I'm gonna call the discrete log one
way function. So let's fix a group, a

99
00:07:37,200 --> 00:07:41,971
一个N阶循环群G，设g为G中一个生成元
cyclic group of order N the group G and
let g be some generator of the group

100
00:07:41,971 --> 00:07:46,987
我再提醒大家一下，这意味着，如果我看
capital G so again I remind you that all
that means is, if I look at all powers of

101
00:07:46,987 --> 00:07:51,335
g的各次幂，我可以得到整个群G的各个元素。现在我们定义
g, then I basically span the entire group
capital G. And now let's define the

102
00:07:51,335 --> 00:07:56,068
如下函数。这个函数从Z_N映射到G，并定义为
following function. The function goes from
ZN to G and it's defined basically as the

103
00:07:56,068 --> 00:08:00,802
x的幂的指数。好的，那么这个函数把任一从0到n-1的
exponentiation to the power of X. Okay, so
this maps any element between zero and n-1

104
00:08:00,802 --> 00:08:04,915
整数映射到群G中的一个元素，通过计算g的幂
to an element of the group capital G
simply by raising g, little g to the

105
00:08:04,915 --> 00:08:09,197
g的适当次幂。显然，如果群G上的离散对数问题
appropriate power. And it's kind of
obvious that if the discrete log problem

106
00:08:09,197 --> 00:08:13,310
是困难的，那么事实上函数f是单向的
in the group capital G is hard, then in
fact f is one way. In fact, the one

107
00:08:13,310 --> 00:08:17,134
f的单向性就是离散对数假设。如果离散对数
wayness of f is the discrete log
assumption. So if the discrete log is

108
00:08:17,134 --> 00:08:21,324
是难于计算的，f就是单向的。现在有趣的是
hard, f is one way. Now the interesting
thing about this one-way functions is it's

109
00:08:21,324 --> 00:08:25,800
这个单向函数有一些有趣的性质。特别是，如果我你
got some interesting properties. In
particular, if I give you f(x) and f(y)

110
00:08:25,800 --> 00:08:31,119
f(x)和f(y)，我宣布，容易计算f(x+y)，即使我们不知道
I claim that it's very easy to compute
f(x + y). Even though we have no idea

111
00:08:31,119 --> 00:08:36,118
x和y是什么。我们只有f(x)和f(y)
what x or y are. All we're given is just f(x) and f(y), nevertheless, we can

112
00:08:36,118 --> 00:08:41,763
不过我们可以计算f(x+y)。我问大家，该怎么做？
compute f(x + y). Let me ask you, how
would you do that? Well, just by rules of

113
00:08:41,763 --> 00:08:46,732
就用指数规则，f(x+y)=f(x)f(y)
exponentiation, basically, f(x + y)
is simply f(x) times f(y). And again,

114
00:08:46,732 --> 00:08:51,826
这些都是在群G上完成的。如果你不相信，回忆一下
this is all done inside the group G. If
you're not convinced, simply recall that f(x + y)

115
00:08:51,826 --> 00:08:57,046
f(x+y)=g^(x+y)=(g^x)(g^y)
is g to the (x + y). Which is
simply g to the x times g to the y, which
(注意到这是一个群同态，ElGamal属于部分同态加密)

116
00:08:57,046 --> 00:09:02,161
即为我们这里的值。这个简单性质
is exactly what we have here. And this
simple property, this simple fact that the

117
00:09:02,161 --> 00:09:06,936
函数有这个加性性质，如果大家想一想
function has this additive property, if
you think about it, is exactly what

118
00:09:06,936 --> 00:09:11,722
它就能够用来实现密钥交换和公钥加密了
enables key exchange and public key
encryption. So, this additional property

119
00:09:11,722 --> 00:09:16,602
那么这个单向函数的加性使公钥密码学成为可能
of the one-way function is what enabled
all of public key cryptography. So let's

120
00:09:16,602 --> 00:09:21,723
我们来看下一个例子，RSA单向函数。
你们这里我们选择两个质数
look at our next example the RSA one way
function so here we're going to choose two

121
00:09:21,723 --> 00:09:27,093
p和q，我们把N设为p*q，然后我们选择e
primes p and q we're going to set N to be p
times q then were going to choose e that's

122
00:09:27,093 --> 00:09:31,612
e与φ(N)互质。然后我们定义函数
relatively prime to phi(N). And then, we
define the functions, and simply as a

123
00:09:31,612 --> 00:09:36,156
从Z_N^*到Z_N^*的函数，即f(x)=x^e
function from ZN star to ZN star,
simply as f(x) equals x to the e. Okay,

124
00:09:36,156 --> 00:09:40,312
那么就是计算x的e次方。我们又说，这个函数是单向的
so raising x to the power of e. And again
we say that this function is one way,

125
00:09:40,312 --> 00:09:44,575
就是基于RSA假设的。RSA假设是一个假设
simply under the RSA assumption. Again,
the RSA assumption is the assumption that

126
00:09:44,575 --> 00:09:48,519
要求这个函数是单向的。关于这个函数有趣的是
this function is one way. And the
interesting thing about this function is

127
00:09:48,519 --> 00:09:52,941
它有着和上一张幻灯片类似的性质
that it has properties similar to the one
that we saw on the previous slide, namely

128
00:09:52,941 --> 00:09:57,258
即给定f(x)和f(y)，我们可以计算f(xy)，不是f(x+y)
the given f(x) and f(y), now we can
compute f(xy) as opposed to f(x + y)

129
00:09:57,258 --> 00:10:01,627
那么我们说这个函数有一个乘法性质
So we say that this function has
a multiplicative property as opposed to

130
00:10:01,627 --> 00:10:05,438
而上一张里的非加法性质。但更重要地
the additive property on the previous
slide. But more importantly this is kind of

131
00:10:05,438 --> 00:10:09,213
这还不是这个函数最有趣的地方。真正令人兴奋的是
not the most interesting thing about this
function. The really exciting thing about

132
00:10:09,213 --> 00:10:12,708
事实上这个函数有一个陷门，换句话说
this function is it in fact has a
trapdoor. In other words there's a secret

133
00:10:12,708 --> 00:10:16,505
有一个私钥可以让我们突然间就能计算这个函数的逆了
key that all of a sudden allows us to
invert this function. Even though without

134
00:10:16,505 --> 00:10:20,679
不过没有私钥时这个函数是单向的。目前我们知道
the secret key the function is one way. As
far as we know. And this property, I'll

135
00:10:20,679 --> 00:10:24,337
这个具有陷门的性质，使得公钥密码学成为可能
say, the fact that it has a trap door,
again, enabled all of public key

136
00:10:24,337 --> 00:10:28,632
我说这个陷门也使得RSA函数
cryptography. I'll say that this trap door
also makes the RSA function especially

137
00:10:28,632 --> 00:10:32,820
特别适合于数字签名。在第七周我们将看到
well suited for digital signatures. In
week seven, we're gonna see that both the
(第七周将是第二季的第一周，敬请期待)

138
00:10:32,820 --> 00:10:36,478
RSA函数和离散对数函数都能让我们构建
RSA function and the discrete log
functions let us construct digital

139
00:10:36,478 --> 00:10:40,614
数字签名。但因为RSA函数有陷门
signatures. But the RSA function, because
it has a trap door, makes it very, very

140
00:10:40,614 --> 00:10:44,484
使得用RSA构建数字签名特别容易。那么事实上
easy to construct digital signatures from
it. And so, in fact, most digital

141
00:10:44,484 --> 00:10:48,301
世界上的大多数数字签名都是依赖于RSA函数
signatures out there in the world, in
fact, rely on the RSA function just

142
00:10:48,301 --> 00:10:52,459
因为很容易根据RSA构建数字签名。那么
because it's so simple to build digital
signatures from it. So again, we see that

143
00:10:52,459 --> 00:10:56,085
我们看到这个单向函数具有特别的性质
this one-way function with the special
properties. It has a multiplicative

144
00:10:56,085 --> 00:10:59,859
它有乘法性质和陷门。本质上，使得公钥密码学成为可能
property and a trap door. Essentially
again, enables all of public key crypto. So

145
00:10:59,859 --> 00:11:03,682
那么总结一下，我们可以构建公钥密码学的原因
to summarize, the reason we are able to
build public key cryptography namely, the

146
00:11:03,682 --> 00:11:07,416
我们可以进行密钥交换和公钥加密等等的原因
reason we're able to do key exchange and
public key encryption and so on, is

147
00:11:07,416 --> 00:11:11,485
是因为我们可以构建单向函数，它们具备特殊的性质
because we're able to construct one-way
functions that have very, very special

148
00:11:11,485 --> 00:11:15,555
特别地，它们有的这些性质有时叫做
properties. In particular, they have these
properties that are sometimes called

149
00:11:15,555 --> 00:11:20,476
同态性质，即给定f(x)和f(y)
homomorphic properties, namely they're
given f(x) and f(y). We can construct

150
00:11:20,476 --> 00:11:26,759
我们可以构建f(x+y)或f(xy)，有些函数，比如RSA
a f(x + y) or, f(xy), and
some functions, like RSA, even have trap

151
00:11:26,759 --> 00:11:32,059
即使有陷门，让我们可以非常容易地构建数字签名
doors, which let us build digital
signatures very, very easily. But the main

152
00:11:32,059 --> 00:11:36,283
但是我想给大家展示的要点是，公钥密码学的魔法
thing I wanted to show you is that the
magic of public key crypto is basically made

153
00:11:36,283 --> 00:11:40,250
是由于这些单向函数及其特殊性质才成为可能
possible because of these one-way
functions with their special properties. So

154
00:11:40,250 --> 00:11:44,268
那么本章结束。第七周我们开始讨论数字签名
that's the end of this module and then
in week seven, we'll start with digital signatures.
